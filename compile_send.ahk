send(var, options:="", speed:="600") {	keyMapping := {}	; Modifier Keys	keyMapping["shift"] := true	keyMapping["control"] := true	keyMapping["ctrl"] := true	keyMapping["alt"] := true	keyMapping["lwin"] := true	keyMapping["rwin"] := true	keyMapping["capslock"] := true	; Alphanumeric Keys	Loop, 26 		{ ; a-z		keyMapping[Chr(Asc("a") + A_Index - 1)] := true	}	Loop, 10 		{ ; 0-9		keyMapping[Chr(48 + A_Index - 1)] := true	}	; Navigation and Editing Keys	keyMapping["space"] := true	keyMapping["enter"] := true	keyMapping["tab"] := true	keyMapping["escape"] := true	keyMapping["esc"] := true	keyMapping["backspace"] := true	keyMapping["delete"] := true	keyMapping["del"] := true	keyMapping["insert"] := true	keyMapping["home"] := true	keyMapping["end"] := true	keyMapping["pgup"] := true	keyMapping["pgdn"] := true	keyMapping["up"] := true	keyMapping["down"] := true	keyMapping["left"] := true	keyMapping["right"] := true	; Function Keys	Loop, 12		{		keyMapping["f" . A_Index] := true	}	; Numpad Keys	keyMapping["numpad0"] := true	keyMapping["numpad1"] := true	keyMapping["numpad2"] := true	keyMapping["numpad3"] := true	keyMapping["numpad4"] := true	keyMapping["numpad5"] := true	keyMapping["numpad6"] := true	keyMapping["numpad7"] := true	keyMapping["numpad8"] := true	keyMapping["numpad9"] := true	keyMapping["numpadadd"] := true	keyMapping["numpadsub"] := true	keyMapping["numpadmul"] := true	keyMapping["numpaddiv"] := true	keyMapping["numpaddot"] := true	keyMapping["numpadenter"] := true	keyMapping["numpadclear"] := true	keyMapping["numpaddel"] := true	; Symbol Keys	keyMapping["`"] := true	keyMapping["-"] := true	keyMapping["="] := true	keyMapping["["] := true	keyMapping["]"] := true	keyMapping["\\"] := true	keyMapping[";"] := true	keyMapping["'"] := true	keyMapping[","] := true	keyMapping["."] := true	keyMapping["/"] := true	; Special Keys	keyMapping["printscreen"] := true	keyMapping["scrolllock"] := true	keyMapping["pause"] := true	keyMapping["break"] := true	keyMapping["appskey"] := true	keyMapping["numlock"] := true	; Mouse Buttons	keyMapping["lbutton"] := true	keyMapping["rbutton"] := true	keyMapping["mbutton"] := true	keyMapping["xbutton1"] := true	keyMapping["xbutton2"] := true	if instr(var, "down") and instr(var, "up")		send_keys := var	else if instr(options, "down") and !instr(var, "{") {		if regexmatch(var, "imO)(.+)\s(.+)", key_found)			send_keys := "{" . key_found[1] . " down}{" . key_found[2] . " down}{" . key_found[2] . " up}{" . key_found[1] . " up}"	} else if regexmatch(var, "imO)^\{?(.+)\}?(\,|\s)?\{?(.+)\}?(\,|\s)?\{?(.+)\}?$", key_found) {		if keyMapping.HasKey(key_found[1]) and keyMapping.HasKey(key_found[3]) and keyMapping.HasKey(key_found[5]) {			if instr(options, "down")				send_keys := "{" . key_found[1] . " down}{" . key_found[3] . " down}{" . key_found[5] . " down}{" . key_found[5] . " up}{" . key_found[3] . " up}{" . key_found[1] . " up}"			else				send_keys := "{" . key_found[1] . "}{" . key_found[2] . "}{" . key_found[3] . "}"		} else			send_keys := var	} else if regexmatch(var, "imO)^\{?([^,}]+)\}?(?:[,\s]+)?\{?([^}]+)\}?$", key_found) {		if keyMapping.HasKey(key_found[1]) and keyMapping.HasKey(key_found[2]) {			if instr(options, "down")				send_keys := "{" . key_found[1] . " down}{" . key_found[2] . " down}{" . key_found[2] . " up}{" . key_found[1] . " up}"			else				send_keys := "{" . key_found[1] . "}{" . key_found[2] . "}"		} else			send_keys := var	} else if regexmatch(var, "imO)^\{?[^,]+\}?$", key_found) {		if keyMapping.HasKey(key_found[1])			send_keys := "{" . key_found[1] . " down}{" . key_found[1] . " up}"		else			send_keys := var	}	sendinput % send_keys/*    Loop, Parse, var, `,		{		item := Trim(A_LoopField) 		if keyMapping.HasKey(item)			tokens.push({ "type": "key", "value": item })		else			tokens.push({ "type": "string", "value": var })	}		Loop, Parse, var, %a_space%		{		item := Trim(A_LoopField) 		if keyMapping.HasKey(item)			tokens.push({ "type": "key", "value": item })		else			tokens.push({ "type": "string", "value": var })	}	    if instr(var, "}") {		if regexmatch(var, "imO)\{(.+)\}\{(.+)\}\{(.+)\}", key_found) {			tokens.push({ "type": "key", "value": key_found[1] })			tokens.push({ "type": "key", "value": key_found[2] })			tokens.push({ "type": "key", "value": key_found[3] })		} else if regexmatch(var, "imO)\{(.+)\}\{(.+)\}", key_found) {			tokens.push({ "type": "key", "value": key_found[1] })			tokens.push({ "type": "key", "value": key_found[2] })		} else if regexmatch(var, "imO)\{(.+)\}", key_found)			tokens.push({ "type": "key", "value": key_found[1] })	} else 		tokens.push({ "type": "string", "value": var })    key_count := 0    key_list := []    for index, token in tokens {        if (token.type = "key") {            key_count++            key_list.push(token.value)        }    }	if (key_count = 0)        send_keys := var	else {		for index, key in key_list {			if instr(options, "down") {				begin .= "{" . key . " down}"				end .= "{" . key . " up}"				send_keys := begin . end			} else				send_keys .= "{" . key . "}"		}	}	sendinput % send_keys	*/}